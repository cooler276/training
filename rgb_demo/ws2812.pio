.pio_version 0 // このファイルで使用しているPIOのバージョンを示します。ここではバージョン0です。

// WS2812プログラムの定義
.program ws2812
.side_set 1  // side_set命令で使用するGPIOピンの数を1に設定します。これは通常、データ信号線そのものです。

// タイミング設定（WS2812のデータ信号のHighとLowの時間の長さを定義）
.define public T1 3  // High信号（論理1を表す長いパルス）の時間単位
.define public T2 3  // Low信号（論理0を表す短いパルス）の時間単位
.define public T3 4  // 各ビット送信後の待機時間単位

.wrap_target  // プログラムのループ開始地点

bitloop:
    out x, 1        side 0 [T3 - 1]  // ステートマシンの出力レジスタXから1ビットを取り出し、出力ピンへ送信します。side 0 はside_setピンをLowに設定し、[T3 - 1] は指定された時間だけ待ちます。
    jmp !x do_zero side 1 [T1 - 1]  // 直前に送信したビットが0（Xの最下位ビットが0）なら、do_zeroラベルへジャンプします。そうでなければ（ビットが1なら）、次の行へ進みます。side 1 はside_setピンをHighに設定し、[T1 - 1] は指定された時間だけ待ちます。
do_one:
    jmp bitloop   side 1 [T2 - 1]  // 送信したビットが1だった場合の処理：High信号（長いパルス）を出力した後、bitloopラベルへ戻り、次のビットの送信を始めます。side 1 はside_setピンをHighに設定し、[T2 - 1] は指定された時間だけ待ちます。
do_zero:
    nop           side 0 [T2 - 1]  // 送信したビットが0だった場合の処理：Low信号（短いパルス）を出力します。nop は何もしない命令です。side 0 はside_setピンをLowに設定し、[T2 - 1] は指定された時間だけ待ちます。
.wrap           // プログラムのループ終了地点。ここから wrap_target へ戻ります。

// C SDKのコードブロック
% c-sdk {
#include "hardware/clocks.h" // クロック制御に関する関数が定義されているヘッダファイル

// WS2812の初期化関数
// pio: 使用するPIOコントローラのインスタンス (例: pio0)
// sm: 使用するステートマシンの番号 (例: 0)
// offset: PIOプログラムがロードされたメモリアドレス
// pin: WS2812のデータ信号が接続されているGPIOピン番号
// freq: WS2812のデータ転送レート (通常は800kHz)
// rgbw: 使用するLEDがRGBWタイプかどうか (ここでは常にfalse)
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {
    pio_gpio_init(pio, pin);                     // 指定されたGPIOピンをPIO制御にします
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); // 指定されたピンから1ピンを出力方向に設定します

    pio_sm_config c = ws2812_program_get_default_config(offset); // ロードされたWS2812プログラムのデフォルト設定を取得します
    sm_config_set_sideset_pins(&c, pin);          // sideset命令で使用するピンを設定します（ここではデータピン自身）
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24); // 出力シフトの設定：
                                                              // - false: シフトレジスタを右シフトしない
                                                              // - true: FIFOからデータがなくなる時に自動的にシフト
                                                              // - rgbw ? 32 : 24: RGBWの場合は32ビット、RGBの場合は24ビットのデータを送信
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // 送信FIFOを結合します。これにより、CPUがデータを書き込むとPIOがそれを読み取って送信します

    // ビットごとのクロック周期を計算します
    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3; // 1ビットを送信するのに必要なクロックサイクル数
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit); // システムクロック周波数から、指定されたデータ転送レートを実現するための分周値を計算します
    sm_config_set_clkdiv(&c, div);                 // 計算された分周値をステートマシンのクロック分周器に設定します

    pio_sm_init(pio, sm, offset, &c);             // 指定されたPIO、ステートマシン、プログラムオフセット、設定でステートマシンを初期化します
    pio_sm_set_enabled(pio, sm, true);           // 指定されたステートマシンを有効化し、プログラムの実行を開始します
}
%}