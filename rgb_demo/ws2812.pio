.pio_version 0 // PIOバージョン0を使用

// WS2812プログラムを定義
.program ws2812
.side_set 1  // side_setを1ビットに設定（GPIOピンの制御に使用）

// タイミング設定（T1、T2、T3の定義）
.define public T1 3  // 高信号（長いパルス）の時間
.define public T2 3  // 低信号（短いパルス）の時間
.define public T3 4  // パルスの後の待機時間

// PIOプログラムの開始位置
.lang_opt python sideset_init = pico.PIO.OUT_HIGH
.lang_opt python out_init     = pico.PIO.OUT_HIGH
.lang_opt python out_shiftdir = 1

.wrap_target  // ループの開始

bitloop:
    out x, 1       side 0 [T3 - 1]   // 1ビットのデータを送信
    jmp !x do_zero side 1 [T1 - 1]  // 送信したビットが0ならdo_zeroにジャンプ、1ならdo_oneに進む
do_one:
    jmp bitloop   side 1 [T2 - 1]   // 高信号（長いパルス）の後、次のビットへ
do_zero:
    nop           side 0 [T2 - 1]   // 低信号（短いパルス）の後、次のビットへ
.wrap

// C SDKのコードブロック
% c-sdk {
#include "hardware/clocks.h"

// WS2812の初期化関数
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {
    pio_gpio_init(pio, pin);  // ピンの初期化
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);  // 出力方向に設定

    pio_sm_config c = ws2812_program_get_default_config(offset);  // 初期設定の取得
    sm_config_set_sideset_pins(&c, pin);  // Sidesetピンを設定
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);  // RGBまたはRGBWのビット数を設定
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);  // 送信用のFIFO設定

    // ビットごとのクロック周期を計算
    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);  // 周波数に基づいた分周値の計算
    sm_config_set_clkdiv(&c, div);  // 分周値を設定

    pio_sm_init(pio, sm, offset, &c);  // ステートマシンの初期化
    pio_sm_set_enabled(pio, sm, true);  // ステートマシンを有効化
}
%}
